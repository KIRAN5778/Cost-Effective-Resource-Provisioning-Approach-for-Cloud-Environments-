/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2021-03-20 06:23:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.amazonaws.services.ec2.model.Volume;
import com.helper.InstanceUserModel;
import com.amazonaws.services.identitymanagement.model.User;
import com.helper.GraphModel;
import com.database.ConnectionManager;
import com.amazonaws.services.ec2.model.InstanceState;
import com.appdynamics.extensions.cloudwatch.InstanceModel;
import com.appdynamics.extensions.cloudwatch.FetchAwsInstances;
import com.helper.UserModel;
import java.util.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.amazonaws.services.identitymanagement.model.User");
    _jspx_imports_classes.add("com.helper.GraphModel");
    _jspx_imports_classes.add("com.helper.UserModel");
    _jspx_imports_classes.add("com.amazonaws.services.ec2.model.Volume");
    _jspx_imports_classes.add("com.appdynamics.extensions.cloudwatch.FetchAwsInstances");
    _jspx_imports_classes.add("com.amazonaws.services.ec2.model.InstanceState");
    _jspx_imports_classes.add("com.helper.InstanceUserModel");
    _jspx_imports_classes.add("com.database.ConnectionManager");
    _jspx_imports_classes.add("com.appdynamics.extensions.cloudwatch.InstanceModel");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../tiles/header.jsp", out, false);
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");

		UserModel um = null;
		if (session.getAttribute("USER_MODEL") == null) {
	
      out.write("\r\n");
      out.write("\t<script>                  \r\n");
      out.write("\t\twindow.location.href='");
      out.print(request.getContextPath());
      out.write("/pages/login.jsp';\r\n");
      out.write("\t</script>\r\n");
      out.write("\t");

		} else {
			um = (UserModel) session.getAttribute("USER_MODEL");
		}
	
      out.write('\r');
      out.write('\n');
      out.write('	');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../tiles/leftmenu.jsp", out, false);
      out.write("\r\n");
      out.write("\t<div class=\"page\">\r\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../tiles/topmenu.jsp", out, false);
      out.write("\r\n");
      out.write("\t\t<div class=\"breadcrumb-holder\">\r\n");
      out.write("\t\t\t<div class=\"container-fluid\">\r\n");
      out.write("\t\t\t\t<ul class=\"breadcrumb\">\r\n");
      out.write("\t\t\t\t\t<li class=\"breadcrumb-item active\"><a href=\"index.html\">Home</a></li>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<section class=\"charts\">\r\n");
      out.write("\t\t\t<div class=\"container-fluid\">\r\n");
      out.write("\t\t\t\t<!-- Page Header-->\r\n");
      out.write("\t\t\t\t<header>\r\n");
      out.write("\t\t\t\t\t<h1 class=\"h3 display\">Dashboard</h1>\r\n");
      out.write("\t\t\t\t</header>\r\n");
      out.write("\t\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t\t<div class=\"col-lg-6\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card line-chart-example\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"card-header d-flex align-items-center\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<h4>CPU Utilization All Nodes</h4>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t\t\t\t   <canvas id=\"dailySalesChart\"></canvas>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"col-lg-6\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card bar-chart-example\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"card-header d-flex align-items-center\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<h4>EBS MemoryReads NodeWise</h4>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t\t\t <canvas id=\"lineChart\"></canvas>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"col-lg-6\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card pie-chart-example\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"card-header d-flex align-items-center\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<h4>Decision</h4>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"chart-container table-responsive\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<table class=\"table table-bordered\">\r\n");
      out.write("                   <thead>\r\n");
      out.write("                          <tr>\r\n");
      out.write("                             <th>srNo</th>\r\n");
      out.write("                             <th>Instance ID</th>\r\n");
      out.write("                             <th>Last Use </th>\r\n");
      out.write("                             <th>CPU</th>\r\n");
      out.write("                             <th>Network</th>\r\n");
      out.write("                             <th>Volume</th>\r\n");
      out.write("                             <th>Decision</th>\r\n");
      out.write("                             </tr>      \r\n");
      out.write("                   </thead>\r\n");
      out.write("                   \r\n");
      out.write("                   ");
 
                    List l=ConnectionManager.getDecisionData(um.getUserid());  
                      for(int i=0;i<l.size();i++)
                      {   
                    	 GraphModel gm=(GraphModel)l.get(i);   
                	   
      out.write("\r\n");
      out.write("                       <tbody>\r\n");
      out.write("                          <tr>\r\n");
      out.write("                            <td>");
      out.print(i+1);
      out.write("</td>\r\n");
      out.write("                            <td>");
      out.print(gm.getInstanceId());
      out.write("</td>\r\n");
      out.write("                            <td>");
      out.print(gm.getDates());
      out.write("</td>\r\n");
      out.write("                             ");
double cpu=gm.getCpu();
                               double cpu1 =(double) Math.round(cpu * 100)/100;
                             
      out.write("\r\n");
      out.write("                             <td>");
      out.print(cpu1);
      out.write("</td>\r\n");
      out.write("                             ");
double net=gm.getNet();
                               double net1 =(double) Math.round(net * 1)/1;
                             
      out.write("\t\r\n");
      out.write("                             <td>");
      out.print(net1);
      out.write("</td>\r\n");
      out.write("                              ");
double vol=gm.getVal();
                                double vol1 =(double) Math.round(vol * 1)/1;
                             
      out.write("\r\n");
      out.write("                              <td>");
      out.print(vol1);
      out.write("</td>\r\n");
      out.write("                               ");
 if(gm.getDecision().equalsIgnoreCase("Deallocate")){ 
      out.write("\r\n");
      out.write("                              <td><span class=\"label label-danger\" style=\"font-size: 14px;\">");
      out.print(gm.getDecision());
      out.write("</span></td>\r\n");
      out.write("                              ");
} else{
      out.write("\r\n");
      out.write("                             <td><span class=\"label label-success\"\" style=\"font-size: 14px;\">");
      out.print(gm.getDecision());
      out.write("</span></td>\r\n");
      out.write("                               ");
} 
      out.write("\r\n");
      out.write("                          </tr>\r\n");
      out.write("                       </tbody>\r\n");
      out.write("                   ");
}
      out.write("\r\n");
      out.write("                  </table>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"col-lg-6\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card polar-chart-example\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"card-header d-flex align-items-center\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<h4>EC2 Distribution</h4>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"chart-container\">\r\n");
      out.write("\t\t\t\t\t\t\t\t    <canvas id=\"doughnut-chart\"></canvas> \r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</section>\r\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../tiles/footer.jsp", out, false);
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../tiles/footer_inc.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");

	List<InstanceUserModel> instances= ConnectionManager.getUserWiseNode(um.getUserid());
	List<Volume> volumeList =ConnectionManager.getVolumes(um.getUserid());
  
      out.write("\r\n");
      out.write("<select name=\"EBSInstances\" id=\"EBSInstances\"  style=\"display: none;\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"form-control\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">Select</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

															 int i=1;
															
															
														
													    	System.err.println("-------------------------------------------------------");
													    	for (Volume volume:volumeList) {
													    		
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t    \t\t<option\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"");
      out.print(volume.getVolumeId()+"#"+volume.getAvailabilityZone());
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
      out.print(volume.getVolumeId()+"-"+volume.getAvailabilityZone()+"-"+volume.getSize());
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t    \t\t");

													    	}
															
															
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select name=\"EC2Instances\" id=\"EC2Instances\" style=\"display: none;\" \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"form-control\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">Select</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

														
															
															
														
															for (InstanceUserModel ins: instances) {
													             i=i+1;
													             
													             String status="";
													             try{
													            	 status=ins.getState();
													            
													             }catch(Exception e){
													            	 
													             }
															
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"");
      out.print(ins.getInstanceId()+"#"+ins.getRegion());
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
      out.print(ins.getInstanceId()+"-"+ins.getRegion()+"-"+status);
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

																}
															
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t</body>\r\n");
      out.write(" \t<script>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tcpuLabels=[];\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tcpuData=[];\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tebsLabels=[];\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tebsData=[];\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t</script>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

														List<HashMap> cpuData=ConnectionManager.getGraphDBData(um.getUserid(), "CPUUtilization", 10,"%d-%b");
														
														for( i=0;i<cpuData.size();i++){
															HashMap data=(HashMap)cpuData.get(i);
															//String[] labels=dataArray[0].split(",");
															//String[] values=dataArray[1].split(",");
															
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<script>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcpuLabels='");
      out.print(data.get("event_date"));
      out.write("'.split(',');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\tcpuData.push([");
      out.print(data.get("tagValue"));
      out.write("]);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</script>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

														}
														
														
														List<HashMap> ebsData=ConnectionManager.getGraphDBData(um.getUserid(), "DiskReadBytes", 10,"%d-%b");
														
														for( i=0;i<ebsData.size();i++){
															HashMap data=(HashMap)ebsData.get(i);
														
															
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<script>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tebsLabels='");
      out.print(data.get("event_date"));
      out.write("'.split(',');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tebsData.push([");
      out.print(data.get("tagValue"));
      out.write("]);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</script>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

														}
														
													
														
														
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\r\n");
      out.write("  $(function () {\r\n");
      out.write("\t  \r\n");
      out.write("\t  \r\n");
      out.write("\t  \r\n");
      out.write("\t  $(document).ready(function(){\r\n");
      out.write("\t\t  console.log('dailySalesChart CPUUtilization');\r\n");
      out.write("\t\t\tec2='AWS/EC2';\r\n");
      out.write("\t\t  document.getElementById('EC2Instances').selectedIndex=1;\r\n");
      out.write("\t    \t//fnGenerateGraphs('CPUUtilization','day','10','#dailySalesChart','line');\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \tfnLoadGraph('#dailySalesChart',cpuLabels,cpuData);\r\n");
      out.write("\t    \t//document.getElementById('EC2Instances').selectedIndex=2;\r\n");
      out.write("\t    \tfnGenerateGraphs('CPUUtilization','day','10','#pieChart','pi');\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \tconsole.log('dailySalesChart NetworkIn');\r\n");
      out.write("\t    \tec2='';\r\n");
      out.write("\t    \tebs='AWS/EBS';\r\n");
      out.write("\t    \tfnLoadGraph('#lineChart',ebsLabels,ebsData);\r\n");
      out.write("\t//fnGenerateGraphs('VolumeReadBytes','day','10','#lineChart','line');\r\n");
      out.write("\t    \tconsole.log('dailySalesChart NetworkOut');\r\n");
      out.write("\t    //\tfnGenerateGraphs('NetworkOut','day','10','#completedTasksChart','line');\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \r\n");
      out.write("\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    });\r\n");
      out.write("\t\tec2='AWS/EC2';\r\n");
      out.write("\t\tcpu=0;\r\n");
      out.write("\t    function fnGenerateGraphs(parameter,filter1,filter2,graphId,graphType){\r\n");
      out.write("\t    \t\r\n");
      out.write("\t     \r\n");
      out.write("\t         \r\n");
      out.write("\t    \tparams='';\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \tdocument.getElementById('EC2Instances').selectedIndex=1;\r\n");
      out.write("\t    \tdocument.getElementById('EBSInstances').selectedIndex=1;\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \tif(ec2.length>0){\r\n");
      out.write("\t    \t\tec2Instance=$('#EC2Instances').val();\r\n");
      out.write("\t    \t\ttokens=ec2Instance.split(\"#\");\r\n");
      out.write("\t    \t\tinstance_id=tokens[0];\r\n");
      out.write("\t    \t\tinstance_region=tokens[1];\r\n");
      out.write("\t    \t\tparams+='parameterName='+parameter+\"&parameterType=AWS/EC2&region=\"+instance_region.toLowerCase()+\"&InstanceId=\"+instance_id;\t\r\n");
      out.write("\t    \t}else if(ebs.length>0){\r\n");
      out.write("\t    \t\tebsInstance=$('#EBSInstances').val();\r\n");
      out.write("\t    \t\ttokens=ebsInstance.split(\"#\");\r\n");
      out.write("\t    \t\tinstance_id=tokens[0];\r\n");
      out.write("\t    \t\tinstance_region=tokens[1];\r\n");
      out.write("\t    \t\tparams+='parameterName='+parameter+\"&parameterType=AWS/EBS&region=\"+instance_region.toLowerCase()+\"&VolumeId=\"+instance_id;\t\r\n");
      out.write("\t    \t}\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \t//$(\"input[id='TimeFilterValue']:checked\").val();\r\n");
      out.write("\t    \t//$(\"input[id='TimeFilter']:checked\").val();\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \t//params+='&TimeFilterValue='+$('#TimeFilterValue').val()+\"&TimeFilter=\"+$('#TimeFilter').val();\t\r\n");
      out.write("\t    \tparams+='&TimeFilterValue='+filter2+'&TimeFilter='+filter1;\t\r\n");
      out.write("\t    \t$.post(\"");
      out.print(request.getContextPath());
      out.write("/tiles/ajax.jsp?methodId=generateGraph\",\r\n");
      out.write("\t    \t\t\tparams,\r\n");
      out.write("\t    \t\t\tfunction(data) {\r\n");
      out.write("\t    \t\tdata=$.trim(data);\r\n");
      out.write("\t    \tconsole.log(data);\r\n");
      out.write("\t    \ttokens=data.split('#');\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \tlabels=tokens[0].split(',');\r\n");
      out.write("\t    \tvals=tokens[1].split(',');\r\n");
      out.write("\t    \tif(parameter=='CPUUtilization'){\r\n");
      out.write("\t    \t\tcpu=vals[0];\r\n");
      out.write("\t    \t}\r\n");
      out.write("\t    \t$(graphId+\"_tip\").html(tokens[2]);\r\n");
      out.write("\t    \t//var tr='<table class=\"table\" style=\"font-size:16px;background-color:lavenderblush;color:black;\"><thead class=\"text-primary\"><tr><td>Sr.No</td><td>Date</td><td>% Usage</td></tr></thead><tbody>';\r\n");
      out.write("\t    \t//for(i=0;i<labels.length;i++)\t\r\n");
      out.write("\t    //\ttr+='<tr><td>'+(i+1)+'</td><td>'+labels[i]+'</td><td>'+vals[i]+'</td></tr>';\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    //\ttr+='</tbody></table>';\r\n");
      out.write("\t    \t//$('#tableId').html('<i class=\"fa fa-long-arrow-up\"></i>'+tr);\r\n");
      out.write("\t    \tvalues=doubled(tokens[1].split(','));\r\n");
      out.write("\t    \tval=Math.max.apply(null, values);\r\n");
      out.write("\t    \tconsole.log(\"data\"+data);\r\n");
      out.write("\t    \tif(graphType=='line'){\r\n");
      out.write("\t    \t\tfnLoadGraph(graphId,tokens[0].split(','),[values]);\r\n");
      out.write("\t    \t}else if(graphType=='pi'){\r\n");
      out.write("\t    \t\t//generatePi(graphId,tokens[0].split(','),values);\r\n");
      out.write("\t    \t}\r\n");
      out.write("\t    \ttry{\r\n");
      out.write("\t    \t\t$(graphId+\"_head\").html(val+\"\");\t\r\n");
      out.write("\t    \t}catch (e) {\r\n");
      out.write("\t\t\t\t// TODO: handle exception\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    }\r\n");
      out.write("\t    \r\n");
      out.write("\t\tfunction getMax(a) {\r\n");
      out.write("\t\t\tmax = -999;\r\n");
      out.write("\t\t\tfor (i = 0; i < a.length; i++) {\r\n");
      out.write("\t\t\t\tif (a[i] > max) {\r\n");
      out.write("\t\t\t\t\tmax = a[i];\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\treturn max;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction getRandomInt(max) {\r\n");
      out.write("\t\t\t  return Math.floor(Math.random() * Math.floor(max));\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction fnLoadGraph(graphId,labels, values) {\r\n");
      out.write("\t\t\t/*  dataDailySalesChart = {\r\n");
      out.write("\t\t\t          labels: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\r\n");
      out.write("\t\t\t          series: [\r\n");
      out.write("\t\t\t              [12, 17, 7, 17, 23, 18, 38]\r\n");
      out.write("\t\t\t          ]\r\n");
      out.write("\t\t\t      };\r\n");
      out.write("\t\t\t */dataDailySalesChart = {  \r\n");
      out.write("\t\t\t\tlabels : labels,\r\n");
      out.write("\t\t\t\tseries : [ values ]\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar b = values.map(function(item) {\r\n");
      out.write("\t\t\t\treturn parseFloat(item);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tval = getMax(b);\r\n");
      out.write("\t\t\tval = val + val * 0.2;\r\n");
      out.write("\t\t\tconsole.log(\"b =\"+b);\r\n");
      out.write("\t\t\tconsole.log(\"val =\"+val);\r\n");
      out.write("\t\t\t");
 List l4=ConnectionManager.getGraphData();
			   String node="";
 			   for(int g=0;g<l4.size();g++)
			   {
				   GraphModel gm=(GraphModel)l4.get(g);
				   node=node+"'"+gm.getInstanceId()+"',";
						   
			   }
 			   if(node.endsWith(","))
 			   {
 				   int length=node.length();
 				   node =node.substring(0, length-1);
 			   }
			
      out.write("\r\n");
      out.write("\t\t\t node=[");
      out.print(node);
      out.write("];\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tdataset=[];\r\n");
      out.write("\t\t\t // color=['#F5A9E144','#A9F5F244','#A9BCF544','#F6CED844','#E1F5A944','#F5BCA944'];\r\n");
      out.write("\t\t\t  color=['#F5A9E144','#A9F5F244','#A9BCF544','#F6CED844','#E1F5A944','#F5BCA944'];\r\n");
      out.write("\t\t\t  for(i=0;i<values.length;i++){\r\n");
      out.write("\t\t\t \r\n");
      out.write("\t\t\t\t/*  obj={ */      \r\n");
      out.write("\t\t\t\t\t\t /*    type :'line',\r\n");
      out.write("\t\t\t\t\t\t\tfillColor : color[i%color.length],\r\n");
      out.write("\t\t\t\t\t\t\tstrokeColor :'rgba(210, 214, 222, 1)',\r\n");
      out.write("\t\t\t\t\t\t\tpointColor : 'rgba(210, 214, 222, 1)',\r\n");
      out.write("\t\t\t\t\t\t    pointStrokeColor : '#c1c7d1',\r\n");
      out.write("\t\t\t\t\t\t\tpointHighlightFill : '#fff',\r\n");
      out.write("\t\t\t\t\t\t\tpointHighlightStroke : 'rgba(220,220,220,1)', \r\n");
      out.write("\t\t\t\t\t\t\tdata : values[i],\r\n");
      out.write("\t\t\t\t\t\t\tlabel:abc,\r\n");
      out.write("\t\t\t\t\t\t\tyAxisID: 'y-axis-'+i,\r\n");
      out.write("\t\t\t\t\t\t\tfill: true, \r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t    data:values[i],\r\n");
      out.write("\t\t\t\t\t        label: 'hello',\r\n");
      out.write("\t\t\t\t\t        fillColor : color[i%color.length],\r\n");
      out.write("\t\t\t\t\t    \tstrokeColor :'rgba(210, 214, 222, 1)',\r\n");
      out.write("\t\t\t\t\t\t\tpointColor : 'rgba(210, 214, 222, 1)',\r\n");
      out.write("\t\t\t\t\t\t    pointStrokeColor : '#c1c7d1',\r\n");
      out.write("\t\t\t\t\t\t\tpointHighlightFill : '#fff',\r\n");
      out.write("\t\t\t\t\t        borderColor: \"#8e5ea2\",\r\n");
      out.write("\t\t\t\t\t        fill: true,\r\n");
      out.write("\t\t\t\t\t\t\t};  \r\n");
      out.write("\t\t\t\t\t\t\t */\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t         /*    label: '# of Votes',\r\n");
      out.write("\t\t\t\t\t\t            data: [12, 19, 3, 5, 2, 3],\r\n");
      out.write("\t\t\t\t\t\t            backgroundColor: [\r\n");
      out.write("\t\t\t\t\t\t                'rgba(255, 99, 132, 0.2)',\r\n");
      out.write("\t\t\t\t\t\t                'rgba(54, 162, 235, 0.2)',\r\n");
      out.write("\t\t\t\t\t\t                'rgba(255, 206, 86, 0.2)',\r\n");
      out.write("\t\t\t\t\t\t                'rgba(75, 192, 192, 0.2)',\r\n");
      out.write("\t\t\t\t\t\t                'rgba(153, 102, 255, 0.2)',\r\n");
      out.write("\t\t\t\t\t\t                'rgba(255, 159, 64, 0.2)'\r\n");
      out.write("\t\t\t\t\t\t            ],\r\n");
      out.write("\t\t\t   */\r\n");
      out.write("\t\t\t\t obj={ label : 'Node '+i+\" \"+node[i],\r\n");
      out.write("\t\t\t\t\t\ttype :'line',           \t\t\r\n");
      out.write("\t\t\t\t\t\tfillColor : color[i],\r\n");
      out.write("\t\t\t\t\t\tstrokeColor :'rgba(210, 114, 222, 1)',\r\n");
      out.write("\t\t\t\t\t\tpointColor : 'rgba(210, 114, 222, 1)',\r\n");
      out.write("\t\t\t\t\t\tpointStrokeColor : '#c1c7d1',\r\n");
      out.write("\t\t\t\t\t\tpointHighlightFill : '#fff',\r\n");
      out.write("\t\t\t\t\t\tpointHighlightStroke : 'rgba(220,220,220,1)',\r\n");
      out.write("\t\t\t\t\t\tdata : values[i],\r\n");
      out.write("\t\t\t\t\t    //yAxisID: 'y-axis-'+i,\r\n");
      out.write("\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t dataset.push(obj);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t  }\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar areaChartData = {\r\n");
      out.write("\t\t\t\tlabels : labels,\r\n");
      out.write("\t\t\t\tdatasets : dataset\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar areaChartOptions = {\r\n");
      out.write("\t\t\t\t//Boolean - If we should show the scale at all\r\n");
      out.write("\t\t\t\t//dispaly :true,\r\n");
      out.write("\t\t\t\tshowScale : true,\r\n");
      out.write("\t\t\t\t//Boolean - Whether grid lines are shown across the chart\r\n");
      out.write("\t\t\t\tscaleShowGridLines : true,\r\n");
      out.write("\t\t\t\t//String - Colour of the grid lines\r\n");
      out.write("\t\t\t\tscaleGridLineColor : 'rgba(0,0,0,.09)',\r\n");
      out.write("\t\t\t\t//Number - Width of the grid lines\r\n");
      out.write("\t\t\t\tscaleGridLineWidth : 1,\r\n");
      out.write("\t\t\t\t//Boolean - Whether to show horizontal lines (except X axis)\r\n");
      out.write("\t\t\t\tscaleShowHorizontalLines : true,\r\n");
      out.write("\t\t\t\t//Boolean - Whether to show vertical lines (except Y axis)\r\n");
      out.write("\t\t\t\tscaleShowVerticalLines : true,\r\n");
      out.write("\t\t\t\t//Boolean - Whether the line is curved between points\r\n");
      out.write("\t\t\t\tbezierCurve : true,\r\n");
      out.write("\t\t\t\t//Number - Tension of the bezier curve between points\r\n");
      out.write("\t\t\t\tbezierCurveTension : 0.3,\r\n");
      out.write("\t\t\t\t//Boolean - Whether to show a dot for each point\r\n");
      out.write("\t\t\t\tpointDot : true,\r\n");
      out.write("\t\t\t\t//Number - Radius of each point dot in pixels\r\n");
      out.write("\t\t\t\tpointDotRadius : 4,\r\n");
      out.write("\t\t\t\t//Number - Pixel width of point dot stroke\r\n");
      out.write("\t\t\t\tpointDotStrokeWidth : 1,\r\n");
      out.write("\t\t\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point\r\n");
      out.write("\t\t\t\tpointHitDetectionRadius : 20,\r\n");
      out.write("\t\t\t\t//Boolean - Whether to show a stroke for datasets\r\n");
      out.write("\t\t\t\tdatasetStroke : true,\r\n");
      out.write("\t\t\t\t//Number - Pixel width of dataset stroke\r\n");
      out.write("\t\t\t\tdatasetStrokeWidth : 2,\r\n");
      out.write("\t\t\t\t//Boolean - Whether to fill the dataset with a color\r\n");
      out.write("\t\t\t\tdatasetFill : true,\r\n");
      out.write("\t\t\t\t//String - A legend template\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("                  title: {\r\n");
      out.write("\t\t\t\t\t\tdisplay: true,\r\n");
      out.write("\t\t\t\t\t\tfontColor:\t'#666',\r\n");
      out.write("\t\t\t\t\t\ttext: 'Chart.js Bar Chart - Multi Axis'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\tshowTitle:true,\r\n");
      out.write("\t\t\t\t//Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container\r\n");
      out.write("\t\t\t\tmaintainAspectRatio : true,\r\n");
      out.write("\t\t\t\t//Boolean - whether to make the chart responsive to window resizing\r\n");
      out.write("\t\t\t\tresponsive : true,\r\n");
      out.write("\t\t\t\t scaleShowLabels : true,\r\n");
      out.write("\t\t\t\t  legend: {\r\n");
      out.write("\t\t\t            display: true,\r\n");
      out.write("\t\t\t            labels: {\r\n");
      out.write("\t\t\t                fontColor: 'rgb(255, 99, 132)'\r\n");
      out.write("\t\t\t            }\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t        },\r\n");
      out.write("\r\n");
      out.write("\t\t\t        scales: {\r\n");
      out.write("\t\t\t\t\t\tyAxes: [{\r\n");
      out.write("\t\t\t\t\t\t\ttype: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\r\n");
      out.write("\t\t\t\t\t\t\tdisplay: true,\r\n");
      out.write("\t\t\t\t\t\t\tposition: 'left',\r\n");
      out.write("\t\t\t\t\t\t\tid: 'y-axis-1',\r\n");
      out.write("\t\t\t\t\t\t}]}\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\tvar lineChartCanvas = $(graphId).get(0).getContext('2d');\r\n");
      out.write("\t    \t//var lineChart = new Chart(lineChartCanvas); \r\n");
      out.write("\t    \t  var lineChartOptions = areaChartOptions;\r\n");
      out.write("\t\t\tvar lineChart = new Chart(lineChartCanvas,{\r\n");
      out.write("\t\t\t    type: 'line',\r\n");
      out.write("\t\t\t    data: areaChartData,\r\n");
      out.write("\t\t\t    options: lineChartOptions,\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\tlineChartOptions.datasetFill = false;\r\n");
      out.write("\t\t\t//lineChart.Line(areaChartData, lineChartOptions); \r\n");
      out.write("\t\t}\r\n");
      out.write("\t    \r\n");
      out.write("\t    \r\n");
      out.write("\t    \r\n");
      out.write("\t    function fnLoadGraph2(graphId,labels,values){\r\n");
      out.write("\t    \t   /*  dataDailySalesChart = {\r\n");
      out.write("\t    \t             labels: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\r\n");
      out.write("\t    \t             series: [\r\n");
      out.write("\t    \t                 [12, 17, 7, 17, 23, 18, 38]\r\n");
      out.write("\t    \t             ]\r\n");
      out.write("\t    \t         };\r\n");
      out.write("\t    \t*/\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \tdataDailySalesChart = {\r\n");
      out.write("\t    \t        labels: labels,\r\n");
      out.write("\t    \t        series: [\r\n");
      out.write("\t    \tvalues\r\n");
      out.write("\t    \t        ]\r\n");
      out.write("\t    \t    };\r\n");
      out.write("\t    \tconsole.log(values);\r\n");
      out.write("\t    \tval=Math.max.apply(null, values);\r\n");
      out.write("\t    \tconsole.log(val);\r\n");
      out.write("\t    \t         optionsDailySalesChart = {\r\n");
      out.write("\t    \t             lineSmooth: Chartist.Interpolation.cardinal({\r\n");
      out.write("\t    \t                 tension: 0\r\n");
      out.write("\t    \t             }),\r\n");
      out.write("\t    \t             low: 0,\r\n");
      out.write("\t    \t             high: val+50, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\r\n");
      out.write("\t    \t             chartPadding: {\r\n");
      out.write("\t    \t                 top: 0,\r\n");
      out.write("\t    \t                 right: 20,\r\n");
      out.write("\t    \t                 bottom: 0,\r\n");
      out.write("\t    \t                 left: 10\r\n");
      out.write("\t    \t             },\r\n");
      out.write("\t    \t         }\r\n");
      out.write("\r\n");
      out.write("\t    \t         var dailySalesChart = new Chartist.Line(graphId, dataDailySalesChart, optionsDailySalesChart);\r\n");
      out.write("            \r\n");
      out.write("\t    \t         md.startAnimationForLineChart(dailySalesChart);\r\n");
      out.write("\r\n");
      out.write("\t    \t }\r\n");
      out.write("\t    function doubled (arr) {\r\n");
      out.write("\t        var doubled = [];\r\n");
      out.write("\t        for (var i = 0; i < arr.length; i++) {\r\n");
      out.write("\t            doubled.push(arr[i] * 2);\r\n");
      out.write("\t        }\r\n");
      out.write("\t        return doubled;\r\n");
      out.write("\t    }\r\n");
      out.write("\t  \r\n");
      out.write("\t   \r\n");
      out.write("\t       ");
 List l3=ConnectionManager.getPidata();
	          
	            String  tagValue=(String)l3.get(0);
	            String  dates=(String)l3.get(1);
	              
	          
	        
      out.write("\r\n");
      out.write("\t        labels='");
      out.print(dates);
      out.write("'.split(',');    \r\n");
      out.write("\t        values=[");
      out.print(tagValue);
      out.write("];\r\n");
      out.write("\t        generatePi(\"doughnut-chart\",labels,values);\r\n");
      out.write("\t  function generatePi(graphId,labels,values){\r\n");
      out.write("\t\t   \t\r\n");
      out.write("\t\t   new Chart(document.getElementById(\"doughnut-chart\"), {\r\n");
      out.write("\t\t\t    type: 'doughnut',\r\n");
      out.write("\t\t\t    data: {\r\n");
      out.write("\t\t\t      labels:labels,\r\n");
      out.write("\t\t\t      datasets: [\r\n");
      out.write("\t\t\t        {\r\n");
      out.write("\t\t\t          label: \"Population (millions)\",\r\n");
      out.write("\t\t\t          backgroundColor: [\"#3e95cd\", \"#8e5ea2\",\"#3cba9f\",\"#e8c3b9\",\"#c45850\",\"#25BB60\",\"#82E42B\",\"#E4AC2B\",\"#2BC2E4\",\"#0D5363\",\"#0CD909\",\"#0968D9\",\"#611684\"],\r\n");
      out.write("\t\t\t          data:values\r\n");
      out.write("\t\t\t        }\r\n");
      out.write("\t\t\t      ]\r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    options: {\r\n");
      out.write("\t\t\t      title: {\r\n");
      out.write("\t\t\t        display: true,\r\n");
      out.write("\t\t\t        text: 'EC2 Distribution'\r\n");
      out.write("\t\t\t      }\r\n");
      out.write("\t\t\t    }\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t \t\r\n");
      out.write("\t  }\r\n");
      out.write("  \r\n");
      out.write("  });\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
