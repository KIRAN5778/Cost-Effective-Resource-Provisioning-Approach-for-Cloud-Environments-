/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2020-01-22 14:06:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.database.ConnectionManager;
import com.helper.InstanceUserModel;
import com.helper.UserModel;
import com.helper.StringHelper;
import com.constant.ServerConstants;
import com.helper.StringHelper;
import com.amazonaws.services.ec2.model.InstanceState;
import com.appdynamics.extensions.cloudwatch.InstanceModel;
import com.amazonaws.services.ec2.model.Volume;
import com.appdynamics.extensions.cloudwatch.FetchAwsInstances;
import com.constant.ServerConstants;
import com.helper.UserModel;
import java.util.*;
import com.appdynamics.extensions.cloudwatch.InstanceModel;
import com.appdynamics.extensions.cloudwatch.FetchAwsInstances;
import com.amazonaws.services.ec2.model.Instance;
import com.amazonaws.services.ec2.model.Reservation;
import java.util.List;

public final class amazon_005fec2_005finstances_005fanalysis_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.helper.StringHelper");
    _jspx_imports_classes.add("com.helper.UserModel");
    _jspx_imports_classes.add("com.amazonaws.services.ec2.model.Volume");
    _jspx_imports_classes.add("com.appdynamics.extensions.cloudwatch.FetchAwsInstances");
    _jspx_imports_classes.add("com.amazonaws.services.ec2.model.InstanceState");
    _jspx_imports_classes.add("com.database.ConnectionManager");
    _jspx_imports_classes.add("com.helper.InstanceUserModel");
    _jspx_imports_classes.add("com.appdynamics.extensions.cloudwatch.InstanceModel");
    _jspx_imports_classes.add("com.amazonaws.services.ec2.model.Instance");
    _jspx_imports_classes.add("com.constant.ServerConstants");
    _jspx_imports_classes.add("com.amazonaws.services.ec2.model.Reservation");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../tiles/header.jsp", out, false);
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");

	int i=1;

      out.write("\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"");
      out.print(request.getContextPath());
      out.write("/theme/js/Chart.js\"></script>\r\n");
      out.write("<body>\r\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../tiles/leftmenu.jsp", out, false);
      out.write("\r\n");
      out.write("\t<div class=\"page\">\r\n");
      out.write("\t\t");

			UserModel um1=null;
			if(session.getAttribute("USER_MODEL")==null){
		
      out.write("\r\n");
      out.write("\t\t<script>\r\n");
      out.write("\t\twindow.location.href='");
      out.print(request.getContextPath());
      out.write("/pages/login.jsp';\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t\t");

			}else{
			um1=(UserModel)session.getAttribute("USER_MODEL");
				}
				 
			List<InstanceUserModel> instances= ConnectionManager.getUserWiseNode(um1.getUserid());
			List<Volume> volumeList =ConnectionManager.getVolumes(um1.getUserid());
		
      out.write("\r\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../tiles/topmenu.jsp", out, false);
      out.write("\r\n");
      out.write("\t\t<div class=\"breadcrumb-holder\">\r\n");
      out.write("\t\t\t<div class=\"container-fluid\">\r\n");
      out.write("\t\t\t\t<ul class=\"breadcrumb\">\r\n");
      out.write("\t\t\t\t\t<li class=\"breadcrumb-item\"><a href=\"index.html\">Home</a></li>\r\n");
      out.write("\t\t\t\t\t<li class=\"breadcrumb-item active\">Over All Usage</li>\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<section class=\"dashboard-header section-padding\">\r\n");
      out.write("\t\t\t<div class=\"container-fluid\">\r\n");
      out.write("\t\t\t\t<div class=\"row d-flex align-items-md-stretch\">\r\n");
      out.write("\t\t\t\t<div class=\"col-sm-3\">\r\n");
      out.write("\t\t\t\t\t<div class=\"card\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-header d-flex align-items-center\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>EC2 Instances List</h4>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t\t\t<select name=\"EC2Instances\" id=\"EC2Instances\"\r\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"form-control\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<option value=\"\">Select</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t");

									for (InstanceUserModel ins: instances) {
																																																																																									             i=i+1;
																																																																																									             
																																																																																									             String status="";
																																																																																									             try{
																																																																																									            	 status=ins.getState();
																																																																																									            
																																																																																									             }catch(Exception e){
																																																																																									            	 
																																																																																									             }
								
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<option value=\"");
      out.print(ins.getInstanceId()+"#"+ins.getRegion());
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t");
      out.print(ins.getInstanceId()+"-"+ins.getRegion()+"-"+status);
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t");

									}
								
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t</select>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"col-sm-3\">\r\n");
      out.write("\t\t\t\t\t<div class=\"card\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-header d-flex align-items-center\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>EC2 Matrix</h4>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t\t<select name=\"EC2Matrix\" id=\"EC2Matrix\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonchange=\"$('#EBSMatrix').val('');$('#EBSInstances').val('');\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"form-control\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">Select</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

																	for ( i = 0; i < ServerConstants.EC2_MATRIX.length; i++) {
																
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"");
      out.print(ServerConstants.EC2_MATRIX[i]);
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
      out.print(ServerConstants.EC2_MATRIX[i]);
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

																	}
																
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"col-sm-3\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-header d-flex align-items-center\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>EC2 Matrix</h4>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"hidden\" name=\"instanceId\" id=\"instanceId\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"");
      out.print(request.getParameter("instanceId"));
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t\t<input  type=\"radio\"   name=\"TimeFilter\" id=\"TimeFilter\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"day\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"day\">Days</label>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"col-sm-3\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-header d-flex align-items-center\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>Time Filter</h4>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t\t<input type=\"radio\" name=\"TimeFilterValue\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"TimeFilterValue\" value=\"1\"><label for=\"1\">1</label>&nbsp;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"radio\" name=\"TimeFilterValue\" id=\"TimeFilterValue\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"3\"><label for=\"3\">3</label>&nbsp; <input type=\"radio\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"TimeFilterValue\" id=\"TimeFilterValue\" value=\"5\"><label for=\"5\">5</label>&nbsp;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"radio\" name=\"TimeFilterValue\" id=\"TimeFilterValue\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"10\"><label for=\"10\">10</label>&nbsp; <input type=\"button\" id=btn\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"btn\" onclick=\"fnGenerateGraphs();\" value=\"Search\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"btn btn-primary pull-right\">\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\t<div class=\"row d-flex align-items-md-stretch\">\r\n");
      out.write("\t\t\t\t<div class=\"card\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-header d-flex align-items-center\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>EBS List</h4>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t\t<select name=\"EBSInstances\" id=\"EBSInstances\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"form-control\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">Select</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

																	System.err.println("-------------------------------------------------------");
																																																																																			    	for (Volume volume:volumeList) {
																
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"");
      out.print(volume.getVolumeId()+"#"+volume.getAvailabilityZone());
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
      out.print(volume.getVolumeId()+"-"+volume.getAvailabilityZone()+"-"+volume.getSize());
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

																	}
																
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-header d-flex align-items-center\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4>Volume Matrix </h4>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t\t\t<select name=\"EBSMatrix\" id=\"EBSMatrix\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonchange=\"$('#EC2Matrix').val('');$('#EC2Instances').val('');\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"form-control\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">Select</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

																	for ( i = 0; i < ServerConstants.EBS_MATRIX.length; i++) {
																
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"");
      out.print(ServerConstants.EBS_MATRIX[i]);
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
      out.print(ServerConstants.EBS_MATRIX[i]);
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");

																	}
																
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t<div class=\"col-md-8\">\r\n");
      out.write("\t\t\t\t<div class=\"card\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"card-header\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<h4>Chart</h4>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t\t<canvas id=\"lineChart\"></canvas>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"col-md-4\">\r\n");
      out.write("\t\t\t\t\t<div class=\"card\">\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t<div class=\"stats\" id=\"tableId\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"row d-flex align-items-md-stretch\">\r\n");
      out.write("\t\t\t<div class=\"col-sm-12\">\r\n");
      out.write("\t\t\t<div class=\"card\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"title\">AWS Matrix Chart</h4>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<p class=\"category\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t<marquee>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"text-success\" id=\"tipId\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle=\"font-size: 16px;  color: black; text-transform: capitalize;\"><i\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-long-arrow-up\"></i> </span>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t</marquee>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t</p>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t</section>\r\n");
      out.write("\r\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../tiles/footer.jsp", out, false);
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../tiles/footer_inc.jsp", out, false);
      out.write("\r\n");
      out.write("</body>\r\n");

	String name = "User";
		UserModel um = (UserModel) session.getAttribute("USER_MODEL");
		if (um != null) {
	name = um.getFname();
		}
		
		String ebs=StringHelper.n2s(request.getParameter("ebs"));
		String ec2=StringHelper.n2s(request.getParameter("ec2"));

      out.write("\r\n");
      out.write("\r\n");

	if(ebs.length()>0){

      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\t\tdocument.getElementById('EBSInstances').selectedIndex=");
      out.print(ebs);
      out.write(";\r\n");
      out.write("\t\tdocument.getElementById('EBSMatrix').selectedIndex=1;\r\n");
      out.write("\t</script>\r\n");

	}

      out.write("\r\n");
      out.write("\r\n");

	if(ec2.length()>0){

      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\t\tdocument.getElementById('EC2Matrix').selectedIndex=");
      out.print(ec2);
      out.write(";\r\n");
      out.write("\t\tdocument.getElementById('EC2Instances').selectedIndex=1;\r\n");
      out.write("\t</script>\r\n");

	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- Material Dashboard DEMO methods, don't include it in your project! -->\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/theme/js/demo.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("\r\n");
      out.write("    // Javascript method's body can be found in assets/js/demos.js\r\n");
      out.write("  //  fnLoadGraph();\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function fnGenerateGraphs(){\r\n");
      out.write("\t\r\n");
      out.write("\tec2=$('#EC2Matrix').val();\r\n");
      out.write("\tebs=$('#EBSMatrix').val();\r\n");
      out.write("\tparams='';\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tif(ec2.length>0){\r\n");
      out.write("\t\tec2Instance=$('#EC2Instances').val();\r\n");
      out.write("\r\n");
      out.write("\t\ttokens=ec2Instance.split(\"#\");\r\n");
      out.write("\t\tinstance_id=tokens[0];\r\n");
      out.write("\t\tinstance_region=tokens[1];\r\n");
      out.write("\r\n");
      out.write("\t\tparams+='parameterName='+ec2+\"&parameterType=AWS/EC2&region=\"+instance_region.toLowerCase()+\"&InstanceId=\"+instance_id;\t\r\n");
      out.write("\t}else if(ebs.length>0){\r\n");
      out.write("\t\tebsInstance=$('#EBSInstances').val();\r\n");
      out.write("\t\ttokens=ebsInstance.split(\"#\");\r\n");
      out.write("\t\tinstance_id=tokens[0];\r\n");
      out.write("\t\tinstance_region=tokens[1];\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\tparams+='parameterName='+ebs+\"&parameterType=AWS/EBS&region=\"+instance_region.toLowerCase()+\"&VolumeId=\"+instance_id;\t\r\n");
      out.write("\t}\r\n");
      out.write("\t//$(\"input[id='TimeFilterValue']:checked\").val();\r\n");
      out.write("\t//$(\"input[id='TimeFilter']:checked\").val();\r\n");
      out.write("\t\r\n");
      out.write("\t//params+='&TimeFilterValue='+$('#TimeFilterValue').val()+\"&TimeFilter=\"+$('#TimeFilter').val();\t\r\n");
      out.write("\tparams+='&TimeFilterValue='+$(\"input[id='TimeFilterValue']:checked\").val()+\"&TimeFilter=\"+$(\"input[id='TimeFilter']:checked\").val();\t\r\n");
      out.write("\t$.post(\"");
      out.print(request.getContextPath());
      out.write("/tiles/ajax.jsp?methodId=generateGraph\",\r\n");
      out.write("\t\t\t\t\t\tparams,\r\n");
      out.write("\t\t\t\t\t\tfunction(data) {\r\n");
      out.write("\t\t\t\t\t\t\tdata = JSON.parse($.trim(data));\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tobject = data[0];\r\n");
      out.write("\t\t\t\t\t\t\tconsole.log(object);\r\n");
      out.write("\t\t\t\t\t\t\t//tokens = data.split('#');\r\n");
      out.write("\t\t\t\t\t\t\tlabels = object['event_date'].split(',');\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tvals = object['tagValue'].split(',');\r\n");
      out.write("\t\t\t\t\t\t\t//$('#tipId').html(tokens[2]);\r\n");
      out.write("\t\t\t\t\t\t\tvar tr = '<table class=\"table\" style=\"font-size:16px;background-color:pink;color:black;\"><thead class=\"text-primary\"><tr><td>Sr.No</td><td>Date</td><td>% Usage</td></tr></thead><tbody>';\r\n");
      out.write("\t\t\t\t\t\t\tfor (i = 0; i < labels.length; i++)\r\n");
      out.write("\t\t\t\t\t\t\t\ttr += '<tr><td>' + (i + 1) + '</td><td>'\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t+ labels[i] + '</td><td>' + vals[i]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t+ '</td></tr>';\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\ttr += '</tbody></table>';\r\n");
      out.write("\t\t\t\t\t\t\t$('#tableId').html('<i class=\"\"></i>' + tr);\r\n");
      out.write("\t\t\t\t\t\t\tfnLoadGraph(labels, vals);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction getMax(a) {\r\n");
      out.write("\t\tmax = -999;\r\n");
      out.write("\t\tfor (i = 0; i < a.length; i++) {\r\n");
      out.write("\t\t\tif (a[i] > max) {\r\n");
      out.write("\t\t\t\tmax = a[i];\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn max;\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction fnLoadGraph(labels, values) {\r\n");
      out.write("\t\t/*  dataDailySalesChart = {\r\n");
      out.write("\t\t          labels: ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\r\n");
      out.write("\t\t          series: [\r\n");
      out.write("\t\t              [12, 17, 7, 17, 23, 18, 38]\r\n");
      out.write("\t\t          ]\r\n");
      out.write("\t\t      };\r\n");
      out.write("\t\t */\r\n");
      out.write("\r\n");
      out.write("\t\tdataDailySalesChart = {\r\n");
      out.write("\t\t\tlabels : labels,\r\n");
      out.write("\t\t\tseries : [ values ]\r\n");
      out.write("\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\tlet\r\n");
      out.write("\t\tb = values.map(function(item) {\r\n");
      out.write("\t\t\treturn parseFloat(item);\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tval = getMax(b);\r\n");
      out.write("\t\tval = val + val * 0.2;\r\n");
      out.write("\t\tconsole.log(b);\r\n");
      out.write("\t\tconsole.log(val);\r\n");
      out.write("\t\tlet\r\n");
      out.write("\t\tareaChartData = {\r\n");
      out.write("\t\t\tlabels : labels,\r\n");
      out.write("\t\t\tdatasets : [ {\r\n");
      out.write("\t\t\t\tlabel : 'Performance Matrix',\r\n");
      out.write("\t\t\t\tfillColor : 'rgba(100, 214, 122, 1)',\r\n");
      out.write("\t\t\t\tstrokeColor : 'rgba(110, 214, 222, 1)',\r\n");
      out.write("\t\t\t\tpointColor : 'rgba(210, 214, 222, 1)',\r\n");
      out.write("\t\t\t\tpointStrokeColor : '#c1c7d1',\r\n");
      out.write("\t\t\t\tpointHighlightFill : '#fff',\r\n");
      out.write("\t\t\t\tpointHighlightStroke : 'rgba(220,220,220,1)',\r\n");
      out.write("\t\t\t\tdata : values\r\n");
      out.write("\t\t\t} ]\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tlet\r\n");
      out.write("\t\tareaChartOptions = {\r\n");
      out.write("\t\t\t//Boolean - If we should show the scale at all\r\n");
      out.write("\t\t\tshowScale : true,\r\n");
      out.write("\t\t\t//Boolean - Whether grid lines are shown across the chart\r\n");
      out.write("\t\t\tscaleShowGridLines : false,\r\n");
      out.write("\t\t\t//String - Colour of the grid lines\r\n");
      out.write("\t\t\tscaleGridLineColor : 'rgba(0,0,0,.05)',\r\n");
      out.write("\t\t\t//Number - Width of the grid lines\r\n");
      out.write("\t\t\tscaleGridLineWidth : 1,\r\n");
      out.write("\t\t\t//Boolean - Whether to show horizontal lines (except X axis)\r\n");
      out.write("\t\t\tscaleShowHorizontalLines : true,\r\n");
      out.write("\t\t\t//Boolean - Whether to show vertical lines (except Y axis)\r\n");
      out.write("\t\t\tscaleShowVerticalLines : true,\r\n");
      out.write("\t\t\t//Boolean - Whether the line is curved between points\r\n");
      out.write("\t\t\tbezierCurve : true,\r\n");
      out.write("\t\t\t//Number - Tension of the bezier curve between points\r\n");
      out.write("\t\t\tbezierCurveTension : 0.3,\r\n");
      out.write("\t\t\t//Boolean - Whether to show a dot for each point\r\n");
      out.write("\t\t\tpointDot : false,\r\n");
      out.write("\t\t\t//Number - Radius of each point dot in pixels\r\n");
      out.write("\t\t\tpointDotRadius : 4,\r\n");
      out.write("\t\t\t//Number - Pixel width of point dot stroke\r\n");
      out.write("\t\t\tpointDotStrokeWidth : 1,\r\n");
      out.write("\t\t\t//Number - amount extra to add to the radius to cater for hit detection outside the drawn point\r\n");
      out.write("\t\t\tpointHitDetectionRadius : 20,\r\n");
      out.write("\t\t\t//Boolean - Whether to show a stroke for datasets\r\n");
      out.write("\t\t\tdatasetStroke : true,\r\n");
      out.write("\t\t\t//Number - Pixel width of dataset stroke\r\n");
      out.write("\t\t\tdatasetStrokeWidth : 2,\r\n");
      out.write("\t\t\t//Boolean - Whether to fill the dataset with a color\r\n");
      out.write("\t\t\tdatasetFill : true,\r\n");
      out.write("\t\t\t//String - A legend template\r\n");
      out.write("\r\n");
      out.write("\t\t\t//Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container\r\n");
      out.write("\t\t\tmaintainAspectRatio : true,\r\n");
      out.write("\t\t\t//Boolean - whether to make the chart responsive to window resizing\r\n");
      out.write("\t\t\tresponsive : true,\r\n");
      out.write("\t\t\tshowTooltips : false\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t  var lineChartCanvas = $('#lineChart').get(0).getContext('2d')\r\n");
      out.write("          var lineChart = new Chart(lineChartCanvas,{\r\n");
      out.write("              type: 'line',\r\n");
      out.write("              data: areaChartData,\r\n");
      out.write("              options: lineChartOptions\r\n");
      out.write("          })\r\n");
      out.write("          var lineChartOptions = areaChartOptions\r\n");
      out.write("          lineChartOptions.datasetFill = false\r\n");
      out.write("         // lineChart.Line(areaChartData, lineChartOptions)\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction fnGenerateGraph() {\r\n");
      out.write("\t\tvar chart = new Chartist.Line('.ct-chart', {\r\n");
      out.write("\t\t\tlabels : [ 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ],\r\n");
      out.write("\t\t\tseries : [ [ 1, 5, 2, 5, 4, 3 ], [ 2, 3, 4, 8, 1, 2 ],\r\n");
      out.write("\t\t\t\t\t[ 5, 4, 3, 2, 1, 0.5 ] ]\r\n");
      out.write("\t\t}, {\r\n");
      out.write("\t\t\tlow : 0,\r\n");
      out.write("\t\t\tshowArea : true,\r\n");
      out.write("\t\t\tshowPoint : false,\r\n");
      out.write("\t\t\tfullWidth : true\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tchart.on('draw', function(data) {\r\n");
      out.write("\t\t\tif (data.type === 'line' || data.type === 'area') {\r\n");
      out.write("\t\t\t\tdata.element.animate({\r\n");
      out.write("\t\t\t\t\td : {\r\n");
      out.write("\t\t\t\t\t\tbegin : 2000 * data.index,\r\n");
      out.write("\t\t\t\t\t\tdur : 2000,\r\n");
      out.write("\t\t\t\t\t\tfrom : data.path.clone().scale(1, 0).translate(0,\r\n");
      out.write("\t\t\t\t\t\t\t\tdata.chartRect.height()).stringify(),\r\n");
      out.write("\t\t\t\t\t\tto : data.path.clone().stringify(),\r\n");
      out.write("\t\t\t\t\t\teasing : Chartist.Svg.Easing.easeOutQuint\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
