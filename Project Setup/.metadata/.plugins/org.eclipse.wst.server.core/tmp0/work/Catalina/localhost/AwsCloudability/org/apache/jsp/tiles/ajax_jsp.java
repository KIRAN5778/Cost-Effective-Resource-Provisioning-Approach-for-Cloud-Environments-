/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2020-01-22 11:29:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.tiles;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.stream.Stream;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.Map;
import com.constant.ServerConstants;
import java.util.Map.Entry;
import java.util.ArrayList;
import java.util.List;
import java.io.OutputStream;
import java.io.IOException;
import com.helper.UserModel;
import java.io.ObjectOutputStream;
import com.database.ConnectionManager;
import com.helper.StringHelper;
import java.util.HashMap;

public final class ajax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.OutputStream");
    _jspx_imports_classes.add("com.fasterxml.jackson.databind.ObjectMapper");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.stream.Stream");
    _jspx_imports_classes.add("com.helper.StringHelper");
    _jspx_imports_classes.add("com.helper.UserModel");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.Map.Entry");
    _jspx_imports_classes.add("java.io.ObjectOutputStream");
    _jspx_imports_classes.add("com.database.ConnectionManager");
    _jspx_imports_classes.add("com.constant.ServerConstants");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	String sMethod = StringHelper.n2s(request
	.getParameter("methodId"));
	String returnString = "";   
	boolean bypasswrite=false;
	UserModel um=null;
	                                                 
if(session.getAttribute("USER_MODEL")!=null){
		um=(UserModel)session.getAttribute("USER_MODEL");
		
		
}
	HashMap parameters = StringHelper.displayRequest(request);
	
	System.out.println(parameters);    
	if (sMethod.equalsIgnoreCase("registerNewUser")) {   
		returnString = ConnectionManager.insertUser(parameters);
	}else if (sMethod.equalsIgnoreCase("generateGraph")) {
	
		parameters.put("statisticsType","Average");    
		//parameters.put("InstanceType","t2.micro");   
				String parameterName = StringHelper
				.n2s(parameters.get("parameterName"));
		String parameterType = StringHelper
				.n2s(parameters.get("parameterType")); // "AWS/EC2" "AWS/EBS"
		String InstanceId = StringHelper.n2s(parameters.get("InstanceId"));
		String InstanceType = StringHelper.n2s(parameters.get("InstanceType"));
		String region = StringHelper.n2s(parameters.get("region"));
		String VolumeId = StringHelper.n2s(parameters.get("VolumeId"));

	

		String statisticsType = StringHelper.n2s(parameters
				.get("statisticsType")); // statisticsType "Minimum" "Maximum"
											// "Sum" "Average" "SampleCount"
											// "pNN.NN"

		String TimeFilter = StringHelper.n2s(parameters.get("TimeFilter"));
		int TimeFilterValue = StringHelper.n2i(parameters
				.get("TimeFilterValue"));
		List<HashMap> cpuData=ConnectionManager.getGraphDBData(um.getUserid(), parameterName, TimeFilterValue,"%d-%b");	


		
		ObjectMapper obj =new ObjectMapper();
		returnString = obj.writeValueAsString(ConnectionManager.filterData(cpuData,InstanceId.length()==0?VolumeId:InstanceId));
		
		//returnString = FetchAWSMatrix.fetchEC2Parameters(parameters);
		bypasswrite=false;
	}
	
	
	else if (sMethod.equalsIgnoreCase("checkLogin")) {
		
		UserModel um2= ConnectionManager.checkLogin(parameters);  
		if(um2!=null){
	session.setAttribute("USER_MODEL", um2);
	
    
	returnString="true";
		}else{
	returnString="false";
		}
	}	else if (sMethod.equalsIgnoreCase("svmDecision")) {
		//cpu,ram,Volume,network
		double cpu= StringHelper.n2d(request.getParameter("cpu"));
		
	double i=	ServerConstants.svm.getSVMPredication(new double[]{cpu,5,2,2});
	if(i==0){
		returnString="Optimal Use";
	}else{
		returnString="Deallocate";
	}
	}
	
	else if (sMethod.equalsIgnoreCase("logout")) {  
	session.removeAttribute("USER_MODEL");
	session.removeAttribute("FetchAwsInstances");
	session.removeAttribute("fetchVolumes");
	bypasswrite=true;

      out.write("<script>\r\n");
      out.write("\t\t    \twindow.location.href='");
      out.print(request.getContextPath());
      out.write("/pages/login.jsp';\r\n");
      out.write("\t\t\t</script>\r\n");
      out.write("\t\t\t");

	}
	if(!bypasswrite){
	out.println(returnString);
	
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
